name: Build and Publish NuGet to GitHub Packages

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*" # Uruchom, gdy tag zaczyna się od v (np. v1.0.0)
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write # Ważne: to uprawnienie jest potrzebne do publikowania pakietów

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.x"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Extract version from tag
        id: version
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Pack NuGet package (Release from tag)
        if: startsWith(github.ref, 'refs/tags/v')
        run: dotnet pack --configuration Release --no-build --output nupkg -p:Version=${{ steps.version.outputs.VERSION }}

      - name: Pack NuGet package (Pre-release from main)
        if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/v')
        run: |
          dotnet pack --configuration Release --no-build --output nupkg -p:VersionSuffix="preview-${{ github.run_number }}"

      - name: Upload NuGet package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: nupkg/*.nupkg

      - name: Publish Release to GitHub Packages
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          dotnet nuget add source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --name github
          dotnet nuget push nupkg/*.nupkg --source github --api-key ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Pre-release to GitHub Packages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/v')
        run: |
          dotnet nuget add source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --name github
          dotnet nuget push nupkg/*.nupkg --source github --api-key ${{ secrets.GITHUB_TOKEN }}

      - name: Clean old pre-release packages - Domain
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/v')
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'SharedKernel.Domain'
          package-type: 'nuget'
          min-versions-to-keep: 1
          delete-only-pre-release-versions: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean old pre-release packages - Application
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/v')
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'SharedKernel.Application'
          package-type: 'nuget'
          min-versions-to-keep: 1
          delete-only-pre-release-versions: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean old pre-release packages - Infrastructure
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/v')
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'SharedKernel.Infrastructure'
          package-type: 'nuget'
          min-versions-to-keep: 1
          delete-only-pre-release-versions: true
          token: ${{ secrets.GITHUB_TOKEN }}
